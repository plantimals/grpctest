// Code generated by protoc-gen-go.
// source: coffee/coffee.proto
// DO NOT EDIT!

/*
Package coffee is a generated protocol buffer package.

It is generated from these files:
	coffee/coffee.proto

It has these top-level messages:
	CoffeeRequest
	CoffeeReply
	Coffee
	Beans
	Transition
	User
*/
package coffee

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoffeeRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CoffeeRequest) Reset()                    { *m = CoffeeRequest{} }
func (m *CoffeeRequest) String() string            { return proto.CompactTextString(m) }
func (*CoffeeRequest) ProtoMessage()               {}
func (*CoffeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CoffeeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CoffeeReply struct {
	Coffee *Coffee `protobuf:"bytes,1,opt,name=Coffee" json:"Coffee,omitempty"`
}

func (m *CoffeeReply) Reset()                    { *m = CoffeeReply{} }
func (m *CoffeeReply) String() string            { return proto.CompactTextString(m) }
func (*CoffeeReply) ProtoMessage()               {}
func (*CoffeeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CoffeeReply) GetCoffee() *Coffee {
	if m != nil {
		return m.Coffee
	}
	return nil
}

type Coffee struct {
	ID        uint32        `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	CurrState string        `protobuf:"bytes,3,opt,name=CurrState" json:"CurrState,omitempty"`
	Beans     *Beans        `protobuf:"bytes,4,opt,name=Beans" json:"Beans,omitempty"`
	History   []*Transition `protobuf:"bytes,5,rep,name=History" json:"History,omitempty"`
	CreatedAt int64         `protobuf:"varint,6,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *Coffee) Reset()                    { *m = Coffee{} }
func (m *Coffee) String() string            { return proto.CompactTextString(m) }
func (*Coffee) ProtoMessage()               {}
func (*Coffee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Coffee) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Coffee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Coffee) GetCurrState() string {
	if m != nil {
		return m.CurrState
	}
	return ""
}

func (m *Coffee) GetBeans() *Beans {
	if m != nil {
		return m.Beans
	}
	return nil
}

func (m *Coffee) GetHistory() []*Transition {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Coffee) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type Beans struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *Beans) Reset()                    { *m = Beans{} }
func (m *Beans) String() string            { return proto.CompactTextString(m) }
func (*Beans) ProtoMessage()               {}
func (*Beans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Beans) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Beans) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Beans) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Transition struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	From string `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To   string `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	Time int64  `protobuf:"varint,4,opt,name=Time" json:"Time,omitempty"`
	User *User  `protobuf:"bytes,5,opt,name=User" json:"User,omitempty"`
}

func (m *Transition) Reset()                    { *m = Transition{} }
func (m *Transition) String() string            { return proto.CompactTextString(m) }
func (*Transition) ProtoMessage()               {}
func (*Transition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Transition) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Transition) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transition) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transition) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Transition) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	ID   uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *User) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CoffeeRequest)(nil), "coffee.CoffeeRequest")
	proto.RegisterType((*CoffeeReply)(nil), "coffee.CoffeeReply")
	proto.RegisterType((*Coffee)(nil), "coffee.Coffee")
	proto.RegisterType((*Beans)(nil), "coffee.Beans")
	proto.RegisterType((*Transition)(nil), "coffee.Transition")
	proto.RegisterType((*User)(nil), "coffee.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoffeeService service

type CoffeeServiceClient interface {
	Coffee(ctx context.Context, in *CoffeeRequest, opts ...grpc.CallOption) (*CoffeeReply, error)
}

type coffeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoffeeServiceClient(cc *grpc.ClientConn) CoffeeServiceClient {
	return &coffeeServiceClient{cc}
}

func (c *coffeeServiceClient) Coffee(ctx context.Context, in *CoffeeRequest, opts ...grpc.CallOption) (*CoffeeReply, error) {
	out := new(CoffeeReply)
	err := grpc.Invoke(ctx, "/coffee.CoffeeService/coffee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoffeeService service

type CoffeeServiceServer interface {
	Coffee(context.Context, *CoffeeRequest) (*CoffeeReply, error)
}

func RegisterCoffeeServiceServer(s *grpc.Server, srv CoffeeServiceServer) {
	s.RegisterService(&_CoffeeService_serviceDesc, srv)
}

func _CoffeeService_Coffee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoffeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeServiceServer).Coffee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coffee.CoffeeService/Coffee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeServiceServer).Coffee(ctx, req.(*CoffeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoffeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coffee.CoffeeService",
	HandlerType: (*CoffeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "coffee",
			Handler:    _CoffeeService_Coffee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coffee/coffee.proto",
}

func init() { proto.RegisterFile("coffee/coffee.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0x86, 0xb1, 0x1d, 0xbb, 0x44, 0x69, 0x72, 0x50, 0xda, 0x62, 0x42, 0xa0, 0xc6, 0x85, 0x62,
	0x4a, 0x89, 0x69, 0x4a, 0xcf, 0xa5, 0x4d, 0x28, 0xcd, 0x65, 0x0f, 0x8a, 0xf7, 0x01, 0x14, 0x7b,
	0x12, 0x04, 0x89, 0xe5, 0x95, 0x94, 0x40, 0x58, 0xf6, 0xb2, 0xaf, 0xb0, 0x8f, 0xb3, 0x8f, 0xb1,
	0xaf, 0xb0, 0x0f, 0xb2, 0x48, 0x96, 0xc8, 0x12, 0x72, 0xd8, 0x93, 0x46, 0xff, 0x7c, 0xcc, 0x3f,
	0x23, 0x0d, 0x1a, 0x96, 0x7c, 0xbd, 0x06, 0xc8, 0xdb, 0x63, 0xd2, 0x08, 0xae, 0x38, 0x8e, 0xda,
	0xdb, 0x68, 0xbc, 0xe1, 0x7c, 0xb3, 0x85, 0x9c, 0x36, 0x2c, 0xa7, 0x75, 0xcd, 0x15, 0x55, 0x8c,
	0xd7, 0xb2, 0xa5, 0xd2, 0xcf, 0xa8, 0x3f, 0x33, 0x1c, 0x81, 0x9b, 0x3d, 0x48, 0x85, 0x07, 0xc8,
	0x67, 0x55, 0xec, 0x25, 0x5e, 0x16, 0x12, 0x9f, 0x55, 0xe9, 0x2f, 0xd4, 0x73, 0x40, 0xb3, 0x3d,
	0xe2, 0xaf, 0x28, 0x6a, 0xaf, 0x06, 0xe9, 0x4d, 0x07, 0x13, 0x6b, 0x6a, 0x21, 0x9b, 0x4d, 0x1f,
	0x3d, 0x07, 0xea, 0x8a, 0x8b, 0xb9, 0xc1, 0xfb, 0xc4, 0x5f, 0xcc, 0x31, 0x46, 0x9d, 0x2b, 0xba,
	0x83, 0xd8, 0x4f, 0xbc, 0xac, 0x4b, 0x4c, 0x8c, 0xc7, 0xa8, 0x3b, 0xdb, 0x0b, 0xb1, 0x54, 0x54,
	0x41, 0x1c, 0x98, 0xc4, 0x49, 0xc0, 0x5f, 0x50, 0xf8, 0x17, 0x68, 0x2d, 0xe3, 0x8e, 0xf1, 0xec,
	0x3b, 0x4f, 0x23, 0x92, 0x36, 0x87, 0xbf, 0xa3, 0x77, 0xff, 0x99, 0x54, 0x5c, 0x1c, 0xe3, 0x30,
	0x09, 0xb2, 0xde, 0x14, 0x3b, 0xac, 0x10, 0xb4, 0x96, 0x4c, 0x4f, 0x4d, 0x1c, 0x62, 0x0c, 0x05,
	0x50, 0x05, 0xd5, 0x1f, 0x15, 0x47, 0x89, 0x97, 0x05, 0xe4, 0x24, 0xa4, 0xbf, 0xad, 0xe1, 0xa5,
	0xde, 0xeb, 0x57, 0xbd, 0xeb, 0x58, 0x6b, 0x15, 0xc8, 0xd2, 0xb6, 0x6d, 0xe2, 0xf4, 0x80, 0xd0,
	0xc9, 0xf5, 0x52, 0x95, 0x7f, 0x82, 0xef, 0x5c, 0x15, 0x1d, 0x6b, 0xa6, 0xe0, 0xb6, 0x86, 0x5f,
	0x70, 0xcd, 0x14, 0x6c, 0x07, 0x66, 0xe4, 0x80, 0x98, 0x18, 0x27, 0xa8, 0x73, 0x2d, 0x41, 0xc4,
	0xa1, 0x79, 0x86, 0xf7, 0x6e, 0x3e, 0xad, 0x11, 0x93, 0x49, 0xbf, 0xb5, 0xc4, 0x5b, 0xde, 0x7c,
	0x5a, 0xba, 0xaf, 0x5f, 0x82, 0x38, 0xb0, 0x12, 0x30, 0x41, 0x76, 0x67, 0xf0, 0xc7, 0xb3, 0x5f,
	0x6d, 0x77, 0x63, 0x34, 0x3c, 0x97, 0x9b, 0xed, 0x31, 0x1d, 0xdf, 0x3f, 0x3d, 0x3f, 0xf8, 0x9f,
	0xf0, 0x87, 0xfc, 0xf0, 0x63, 0x05, 0x8a, 0xda, 0x2d, 0x94, 0xf9, 0x2d, 0xab, 0xee, 0x56, 0x91,
	0x59, 0xb3, 0x9f, 0x2f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x6b, 0xfe, 0xdc, 0xa3, 0x02, 0x00,
	0x00,
}
